=begin
У вас есть файл, со следующей структурой и содержащий не менее 10 строк. Имя Фамилия возраст
Пример:
Иван Иванов 20
Петр Петров 21
Необходимо прочитать файл, затем запросив у пользователя ввод возраста, найти в результатах
чтения файла студента, чей возраст равен введенному числу и записать этого студента(ов) в другой файл
с названием results.txt. После этого перезапросить ввод. Программа завершается выводом на экран
содержимого файла result.txt построчно если все студенты из первого файла были записагы во второй или
если пользователь ввел с клавиатуры -1
=end

#Сохраним в переменнюу путь к самой программе чтобы гарантировать в дальнейшем правильный путь к файлу
current_path = File.dirname(__FILE__)

# Записываем путь к файлу в переменную / теперь можем запускать программу вне зависимости от нашего местоположения в консоли
file_path = current_path + './data/people.txt'
file_path_results = current_path + './data/results.txt'

#Проверим, а есть ли файл, если файла нет - выходим из программы.
abort 'Файл не найден' unless File.exist?(file_path)

# Открываем файл на чтение с помощью встроенного класса File
people = File.new(file_path,'r')
#Прочитем файл
# file_lines = file.read.split("\n") - можно прочитать так или так:
people_lines = people.readlines.sort! # отличается от read тем, что возвращает не одну большую строку, а массив строк разбитых
                            # по символу переноса строки
people.close


loop do
  # Открываем файл на изменение с помощью встроенного класса File
  results = File.open(file_path_results,'a+')
  @results_lines = results.readlines.sort!

  break puts 'Все студенты переписаны' if @results_lines == people_lines

  print 'Введите возраст: '
  age = gets.strip.chomp
  break 'Вы ввели -1 для завершения работы программы' if age == '-1'

  people_lines.each_with_index do |item, index|
    results.puts(people_lines[index]) if item[(-3..-2)] == age
  end
    results.close
end

#Выведем список переписанных студентов
@results_lines.each { |i| puts i  }
